Controller -> Service -> Repository -> DB
                Domain

- Controller : MVC의 컨트롤러가 모여 있는 곳. 컨트롤러는 서비스 계층을 호출하고 결과를 뷰에 전달.
- Service : 서비스 계층에는 비즈니스 로직이 있고 트랜잭션을 시작한다. 서비스 계층은 데이터 접근 계층인 리포지토리를 호출한다
- Repository : JPA를 직접 사용하는 곳. 여기서 엔티티 매니저를 사용해서 엔티티를 저장하고 조회한다.
- Domain : 엔티티가 모여 있는 계층. 모든 게층에서 사용

개발 순서 
1. 비즈니스 로직을 수행하는 서비스와 리포지토리 계층을 먼저 개발하고 테스트 케이스 작성해서 검증
2. 컨트롤러와 뷰를 개발

@Component	        스프링이 자동으로 감지하고 빈으로 등록하는 클래스에 사용.
@Service	        @Component의 특수화된 형태. 비즈니스 로직을 담은 클래스에 사용.
@Repository	        데이터 액세스 계층 클래스에 사용. 예외 변환 등 추가 기능을 제공.
@Controller	        웹 요청을 처리하는 컨트롤러 클래스에 사용. 반환 값은 뷰 이름으로 간주.
@RestController	    @Controller + @ResponseBody. JSON, XML 등의 HTTP 응답 바디로 바로 반환. API 서버에서 주로 사용.
@Bean	            개발자가 직접 Bean을 생성하여 등록할 때 사용. @Configuration 클래스 안에서 사용.

어노테이션	설명
@GetMapping, @PostMapping, @PutMapping, @DeleteMapping	각각 HTTP 메서드에 해당하는 요청을 처리하는 메서드에 사용.
@RequestMapping	                                        HTTP 메서드 무관하게 경로를 설정할 때 사용. 메서드 속성을 함께 지정하면 세부 조정 가능.
@PathVariable	                                        URL 경로의 변수를 메서드 파라미터로 받음.
@RequestParam	                                        쿼리 파라미터를 메서드 파라미터로 받음.
@RequestBody	                                        요청의 JSON 바디를 객체로 변환해 바인딩함.
@ResponseBody	                                        리턴 값을 HTTP 응답 바디에 그대로 담음. API 응답에서 주로 사용.
